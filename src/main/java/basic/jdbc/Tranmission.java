package basic.jdbc;

import basic.jdbc.config.ConnectionPool;
import basic.jdbc.dao.CourseDAO;
import basic.jdbc.dao.EnrollmentDAO;
import basic.jdbc.dao.SemesterDAO;
import basic.jdbc.dao.StudentDAO;
import basic.jdbc.model.Course;
import basic.jdbc.model.Enrollment;
import basic.jdbc.model.Semester;
import basic.jdbc.model.Student;

import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;

public class Tranmission {
    public static void main(String[] args) {
        try (Connection conn = ConnectionPool.getDataSource().getConnection()) {
            conn.setAutoCommit(false); // ‡∏õ‡∏¥‡∏î Auto-commit

            System.out.println("‚úÖ Connected to MySQL via Connection Pool!");

            StudentDAO studentDAO = new StudentDAO(conn);
            CourseDAO courseDAO = new CourseDAO(conn);
            SemesterDAO semesterDAO = new SemesterDAO(conn);
            EnrollmentDAO enrollmentDAO = new EnrollmentDAO(conn);

            // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            Student student = new Student.Builder()
                    .id(1)
                    .name("Kasidit")
                    .surname("Kornsang")
                    .birthday(Date.valueOf(LocalDate.of(2004, 6, 25)))
                    .yearJoin(65)
                    .faculty("Engineering")
                    .major("Computer")
                    .gpa(0.00)
                    .studentStatus(Student.STATUS.active)
                    .build();
            boolean studentCreated = studentDAO.addStudent(student);

            // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤
            Course course = new Course.Builder()
                    .courseId(1)
                    .courseCode("CS101")
                    .courseName("Introduction to CS")
                    .credit(3)
                    .build();
            boolean courseCreated = courseDAO.addCourse(course);

            // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡∏≠‡∏°
            Semester semester = new Semester.Builder()
                    .semesterId(1)
                    .year(2025)
                    .term("1")
                    .build();
            boolean semesterCreated = semesterDAO.addSemester(semester);

            // 4. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            Enrollment enrollment = new Enrollment.Builder()
                    .enrollmentId(1)
                    .studentId(1)
                    .courseId(1)
                    .semesterId(1)
                    .score(0)
                    .grade(null)
                    .build();
            boolean enrolled = enrollmentDAO.addEnrollment(enrollment);

            if (studentCreated && courseCreated && semesterCreated && enrolled) {
                conn.commit(); // ‚úÖ commit ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô
                System.out.println("‚úÖ Enrollment successful.");
            } else {
                conn.rollback(); // ‚ùå rollback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡πÉ‡∏î‡∏≠‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                System.out.println("‚ùå Some insertions failed. Rolled back.");
            }

            // Clean up (‡∏à‡∏∞‡πÑ‡∏°‡πà commit/rollback ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÅ‡∏¢‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ transaction ‡πÉ‡∏´‡∏°‡πà)
            enrollmentDAO.deleteEnrollment(1);
            semesterDAO.deleteSemester(1);
            courseDAO.deleteCourse(1);
            studentDAO.deleteStudent(1);

            System.out.println("üßπ Cleanup completed.");

        } catch (SQLException e) {
            System.out.println("‚ùå Connection failed.");
            e.printStackTrace();
        }
    }
}
